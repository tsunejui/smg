generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime? @map("email_verified")
  password      String?
  image         String?
  isAdmin       Boolean   @default(false) @map("is_admin")
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")

  accounts      Account[]
  sessions      Session[]
  topics        Topic[]
  mediaAccounts MediaAccount[]
  articles      Article[]
  reposts       Repost[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Topic {
  id          String   @id @default(cuid())
  name        String
  description String?
  keywords    String[]
  platforms   String[]
  userId      String   @map("user_id")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  articles Article[]

  @@map("topics")
}

model MediaAccount {
  id          String   @id @default(cuid())
  platform    String
  accountId   String   @map("account_id")
  accountName String   @map("account_name")
  accessToken String?  @map("access_token")
  refreshToken String? @map("refresh_token")
  expiresAt   DateTime? @map("expires_at")
  userId      String   @map("user_id")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  reposts Repost[]

  @@unique([platform, accountId, userId])
  @@map("media_accounts")
}

model Article {
  id          String   @id @default(cuid())
  title       String
  content     String   @db.Text
  originalUrl String   @map("original_url")
  platform    String
  authorName  String?  @map("author_name")
  authorId    String?  @map("author_id")
  publishedAt DateTime @map("published_at")
  topicId     String   @map("topic_id")
  userId      String   @map("user_id")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  topic   Topic    @relation(fields: [topicId], references: [id], onDelete: Cascade)
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  reposts Repost[]

  @@map("articles")
}

model Repost {
  id             String   @id @default(cuid())
  articleId      String   @map("article_id")
  mediaAccountId String   @map("media_account_id")
  customCaption  String?  @map("custom_caption")
  aiCaption      String?  @map("ai_caption")
  status         String   @default("pending")
  scheduledAt    DateTime? @map("scheduled_at")
  postedAt       DateTime? @map("posted_at")
  externalId     String?  @map("external_id")
  userId         String   @map("user_id")
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @updatedAt @map("updated_at")

  article      Article      @relation(fields: [articleId], references: [id], onDelete: Cascade)
  mediaAccount MediaAccount @relation(fields: [mediaAccountId], references: [id], onDelete: Cascade)
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("reposts")
}

model SystemSetting {
  id        String   @id @default(cuid())
  key       String   @unique
  value     String   @db.Text
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("system_settings")
}

model Platform {
  id          String   @id @default(cuid())
  name        String   @unique
  displayName String   @map("display_name")
  enabled     Boolean  @default(true)
  config      String   @db.Text
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  @@map("platforms")
}